version: '3.8'

services:
  # Python AI Services
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile
    container_name: veltris-ai-services
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - ENVIRONMENT=development
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./ai-services/src:/app/src:ro  # Mount for development
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Node.js API Gateway
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: veltris-gateway
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - NODE_ENV=development
      - AI_SERVICE_URL=http://ai-services:8000
      - FRONTEND_URL=http://localhost:5173
      - API_SECRET_KEY=${API_SECRET_KEY}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      ai-services:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend (optional - can run separately)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: veltris-frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3001
    depends_on:
      - gateway
    restart: unless-stopped
    profiles:
      - frontend  # Optional profile

networks:
  default:
    name: veltris-network

volumes:
  ai_data:
    driver: local